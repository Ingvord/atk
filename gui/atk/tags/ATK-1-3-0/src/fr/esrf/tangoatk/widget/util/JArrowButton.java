/*
 * JArrowButton.java
 */

package fr.esrf.tangoatk.widget.util;

import java.awt.event.*;
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import javax.swing.*;

public class JArrowButton extends JComponent implements MouseListener,ActionListener {

    public static int UP   = 1;
    public static int DOWN = 2;
    
    private int   state;
    private int   orientation;
    private Color lightColor;
    private Color darkColor;
    private Timer autoRepeat;
    private int   timerDelay;
    
    // General constructor
    public JArrowButton() {
       
       setLayout(null);
       setBackground( new Color(200,200,200) );
       setOpaque( false );
       state = 0;
       orientation = UP;
       timerDelay = 300;
       autoRepeat = new Timer(1000,this);       
       addMouseListener( this );
       
    }

    // Set the button orientation UP/DOWN
    public void setOrientation(int o) {
      orientation = o;
    }
    
    // Saturate byte to 0..255 interval
    public int staturate(int c) {
       int n = c;
       if( n>255 ) n=255;
       if( n<0 )   n=0;
       return n;
    }
    
    // Compute lighter or darker color
    public Color computeShadowColor(Color c,double ratio) {
       int nb,nr,ng;
       
       nb = staturate( (int) ( c.getBlue() * ratio ) );
       nr = staturate( (int) ( c.getRed() * ratio ) );
       ng = staturate( (int) ( c.getGreen() * ratio ) );
       return new Color( nr , ng , nb );       
    }
    
    // Set the background color
    public void setBackground(Color c) {
      lightColor = computeShadowColor(c,1.3);      
      darkColor  = computeShadowColor(c,0.7);
      super.setBackground(c);
    }
    
    // Action listener interface (Generated by the timer)
    public void actionPerformed(ActionEvent e) {
      if( e.getSource() == autoRepeat ) {
      
        if( autoRepeat.getDelay() != timerDelay )
	  autoRepeat.setDelay(timerDelay);

	// Send mouseClicked to all listeners
	MouseListener[] listenerList = (MouseListener[])(getListeners(MouseListener.class));
	MouseEvent m = new MouseEvent( this, MouseEvent.MOUSE_CLICKED,
			       e.getWhen() , e.getModifiers(), 3, 3, 1,false );
	for(int  i=0;i<listenerList.length;i++) listenerList[i].mouseClicked(m);
	
      }
    }
    
    // MouseListener interface 
    public void mouseClicked(MouseEvent e) {}
    public void mouseEntered(MouseEvent e) {}
    
    public void mouseExited(MouseEvent e) {
       state = 0;
       autoRepeat.stop();
       autoRepeat.setDelay(1000);
       repaint();
       //System.out.println("Exit");
    }
    
    public void mousePressed(MouseEvent e) {
       state = 1;
       autoRepeat.start();
       repaint();
       //System.out.println("Press");
    }
    
    public void mouseReleased(MouseEvent e) {
       state = 0;
       autoRepeat.stop();
       autoRepeat.setDelay(1000);
       repaint();
       //System.out.println("Release");
    }

    // Paint the component 
    protected void paintComponent(Graphics g) {
	
	int w = getWidth() - 1;
	int h = getHeight() - 1;
	int m = w / 2;
	
	// Draw background
	int pointx[] = new int[3];
	int pointy[] = new int[3];

	if( orientation==UP ) {
		
	  pointx[0] = 0;
	  pointy[0] = h;	
	  pointx[1] = m;
	  pointy[1] = 0;
	  pointx[2] = w;
	  pointy[2] = h;
	
	  g.setColor( getBackground() );
	  g.fillPolygon( pointx , pointy , 3 );
	
	  // Draw border
	  if( state==0 ) {
	    g.setColor( lightColor );
	    g.drawLine( 0,h,m,0 );
	    g.setColor( darkColor );
	    g.drawLine( m,0,w,h );
	    g.drawLine( w,h,0,h );	  	  
	  } else {	
	    g.setColor( darkColor );
	    g.drawLine( 0,h,m,0 );
	    g.setColor( lightColor );
	    g.drawLine( m,0,w,h );
	    g.drawLine( w,h,0,h );	  	  
	  }
	  
	} else {
	
	  pointx[0] = 0;
	  pointy[0] = 0;	
	  pointx[1] = m;
	  pointy[1] = h;
	  pointx[2] = w;
	  pointy[2] = 0;
	
	  g.setColor( getBackground() );
	  g.fillPolygon( pointx , pointy , 3 );
	
	  // Draw border
	  if( state==0 ) {
	    g.setColor( lightColor );
	    g.drawLine( 0,0,m,h );
	    g.setColor( darkColor );
	    g.drawLine( m,h,w,0 );
	    g.drawLine( w,0,0,0 );	  	  
	  } else {	
	    g.setColor( darkColor );
	    g.drawLine( 0,0,m,h );
	    g.setColor( lightColor );
	    g.drawLine( m,h,w,0 );
	    g.drawLine( w,0,0,0 );	  	  
	  }
	
	}
		 	
    }
    
    /* main */
    public static void main(String args[]) {
    
    	JFrame f = new JFrame();
        JArrowButton b = new JArrowButton();
	f.getContentPane().setLayout(null);
	f.getContentPane().add(b);
	b.setBounds( 10,10,10,10 );	
	f.setSize(200,100);
	f.setVisible(true);
	
    }
    
}
