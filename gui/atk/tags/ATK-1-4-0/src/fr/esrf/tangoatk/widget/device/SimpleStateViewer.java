/*
 * SimpleStateViewer.java
 *
 */

package fr.esrf.tangoatk.widget.device;
import fr.esrf.tangoatk.core.Device;
import fr.esrf.tangoatk.core.IDeviceApplication;
import fr.esrf.tangoatk.core.StateEvent;
import fr.esrf.tangoatk.core.ErrorEvent;
import java.util.*;
import fr.esrf.tangoatk.widget.util.*;


/**
 * <code>State</code>
 * State is a viewer to surveil the state of a
 * {@link fr.esrf.tangoatk.core.Device}. SimpleStateViewer offer
 * the possibility to use Antialiased font for better rendering
 * SimpleStateViewer has no label.
 * Normally one connects the
 * device with the viewer like this:<br>
 * <code>
 * Device device = getDevice(); // some method to obtain the device.
 * State = new State();
 * state.setModel(device);
 * </code>
 * @author <a href="mailto:assum@esrf.fr">Erik Assum</a>
 * @version $Revision$
 */
public class SimpleStateViewer extends JSmoothLabel
    implements fr.esrf.tangoatk.core.IStateListener {
    
    Device device;
    String state = "UNKNOWN";
    boolean externalSetText = false;
    static Map colors;
    boolean stateClickable = true;
    IDeviceApplication application;

    static {
	colors = new HashMap();
        colors.put("ON",      new java.awt.Color(  0,255,  0)); // Green
        colors.put("OFF",     new java.awt.Color(255,255,255)); // White
        colors.put("CLOSE",   new java.awt.Color(255,255,255)); // White
        colors.put("OPEN",    new java.awt.Color(  0,255,  0)); // Green
        colors.put("INSERT",  new java.awt.Color(  0,255,  0)); // Green
        colors.put("EXTRACT", new java.awt.Color(  0,255,  0)); // Green
        colors.put("MOVING",  new java.awt.Color(128,160,255)); // Light Blue
        colors.put("STANDBY", new java.awt.Color(255,255,  0)); // Yellow
        colors.put("FAULT",   new java.awt.Color(255,  0,  0)); // Red
        colors.put("INIT",    new java.awt.Color(204,204,122)); // Beige
        colors.put("RUNNING", new java.awt.Color(128,160,255)); // Light Blue
	colors.put("ALARM",   new java.awt.Color(255,140,  0)); // Orange
        colors.put("DISABLE", new java.awt.Color(255,  0,255)); // Magenta
        colors.put("UNKNOWN", new java.awt.Color(155,155,155)); // Grey
    }


    public SimpleStateViewer () {
        initComponents();
    }

    public static java.awt.Color getColor4State(String state) {
	return (java.awt.Color)colors.get(state);
    }
						  

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        setFont(new java.awt.Font("Dialog", 0, 12));
        setPreferredSize(new java.awt.Dimension(40, 14));
        setOpaque(true);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valueLabelMouseClicked(evt);
            }
        });
        
    }//GEN-END:initComponents

    private void valueLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_valueLabelMouseClicked
        // Add your handling code here:
	if ((evt.getModifiers() &
	     java.awt.event.InputEvent.BUTTON3_MASK) != 0) {
	    if (application == null) return;
	    application.setModel(device);
	    application.run();
	    return;
	}

	if (stateClickable && device != null) {
	    popUp.setModel(device);
	    popUp.setVisible(true);
	}

    }//GEN-LAST:event_valueLabelMouseClicked

    IDevicePopUp popUp = SingletonStatusViewer.getInstance();
    
    /**
     * Get the value of popUp.
     * @return value of popUp.
     */
    public IDevicePopUp getPopUp() {
	return popUp;
    }
    
    /**
     * Set the value of popUp.
     * @param v  Value to assign to popUp.
     */
    public void setPopUp(IDevicePopUp  v) {
	this.popUp = v;
    }
    
    /**
     * <code>setModel</code> sets the model of this viewer.
     * If the textLabel property is not set, the name of the device is
     * shown on the textLabel.
     * @param device a <code>Device</code> to surveil
     */
    public void setModel(Device device) {
        this.device = device;
        device.addStateListener(this);
        setState(device.getState());

	setToolTipText(device.getName());
    }

    /**
     * <code>getModel</code> gets the model of this stateviewer.
     *
     * @return a <code>Device</code> value
     */
    public Device getModel() {
	return device;
    }
    
    /**
     * <code>setState</code>
     *
     * @param state a <code>String</code> value 
     */
    public void setState(String state) {
	this.state = state;
        setBackground((java.awt.Color)colors.get(state));
    }
    
    /**
     * <code>getState</code>
     *
     * @return a <code>String</code> value presenting the state of the device
     */
    public String getState() {
        return state;
    }

    /**
     * <code>setStateVisible</code> makes the state visible or not.
     *
     * @param visible a <code>boolean</code> value
     */
    public void setStateVisible(boolean visible) {
        setVisible(visible);
    }
    
    /**
     * <code>isStateVisible</code> returns the visibility of the
     * state
     * @return a <code>boolean</code> value
     */
    public boolean isStateVisible() {
        return isVisible();
    }
    
    
    /**
     * <code>stateChange</code> inherited from IStateListener
     *
     * @param evt a <code>StateEvent</code> value
     */
    public void stateChange(StateEvent evt) {
            setState(evt.getState());
    }

    public void errorChange(ErrorEvent evt) {
	setState("UNKNOWN");

    }

    /**
     * <code>setStateText</code> sets the text on the colored state box
     *
     * @param text a <code>String</code> value
     */
    public void setStateText(String text) {
	setText(text);
    }

    /**
     * <code>getStateText</code> gets the text that is on the
     * colored state box
     * @return a <code>String</code> value
     */
    public String getStateText() {
	return getText();
    }
    

    public void setStateFont(java.awt.Font font) {
	setFont(font);
    }

    public java.awt.Font getStateFont() {
	return getFont();
    }

    public void setStateForeground(java.awt.Color color) {
	setForeground(color);
    }


    public java.awt.Color getStateForeground() {
	return getForeground();
    }


    /**
     * <code>setStateHorizontalAlignement</code>
     * @see javax.swing.SwingConstants
     * @param i an <code>int</code> value
     */
    public void setStateHorizontalAlignment(int i) {
	setHorizontalAlignment(i);
    }

    public int getStateHorizontalAlignment() {
	return getHorizontalAlignment();
    }
    
    public void setStatePreferredSize(java.awt.Dimension dimension) {
	setPreferredSize(dimension);
    }

    public java.awt.Dimension getStatePreferredSize() {
	return getPreferredSize();
    }

    public void setStateBorder(javax.swing.border.Border border) {
	setBorder(border);
    }

    public javax.swing.border.Border getStateBorder() {
	return getBorder();
    }
    
    /**
     * <code>setStateClickable</code> will the state be clickable?
     *
     * @param clickable a <code>boolean</code> value
     */
    public void setStateClickable(boolean clickable) {
	stateClickable = clickable;
    }

    /**
     * <code>isStateClickable</code> returns if the state is clickable or not.
     *
     * @return a <code>boolean</code> value
     */
    public boolean isStateClickable() {
	return stateClickable;
    }

    public void setApplication(IDeviceApplication runnable) {
	application = runnable;
    }

    public IDeviceApplication getApplication() {
	return application;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
