#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass Tango_book
\language english
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage widemarginsa4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 5
\tocdepth 4
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter

TangoATK Programmer's Guide
\layout Standard

This chapter is only the Tango ATK (Application ToolKit) programmers guide.
 You can find a reference guide with a full description of TangoATK classes
 and methods in 
\begin_inset LatexCommand \cite{ATK-doc}

\end_inset 


\layout Section

Introduction
\layout Standard

This document describes how to develop applications using the Tango Application
 Toolkit, TangoATK for short.
 It will start with a brief description of the main concepts behind the
 toolkit, and then continue with more practical, real-life examples to explain
 key parts.
\layout Subsection

Assumptions
\layout Standard

The author assumes that the reader has a good knowledge of the Java programming
 language, and a thorough understanding of object-oriented programming.
 Also, it is expected that the reader is fluent in all aspects regarding
 Tango devices, attributes, and commands.
\layout Section

The key concepts of TangoATK
\layout Standard

TangoATK was developed with these goals in mind
\layout Itemize

TangoATK should help minimize development time 
\layout Itemize

TangoATK should help minimize bugs in applications 
\layout Itemize

TangoATK should support applications that contain attributes and commands
 from several different devices.
 
\layout Itemize

TangoATK should help avoid code duplication.
 
\layout Standard

Since most Tango-applications were foreseen to be displayed on some sort
 of graphic terminal, TangoATK needed to provide support for some sort of
 graphic building blocks.
 To enable this, and since the toolkit was to be written in Java, we looked
 to Swing to figure out how to do this.
\layout Standard

Swing is developed using a variant over a design-pattern the Model-View-Controll
er
\begin_inset LatexCommand \index{Model-View-Controller}

\end_inset 

 (MVC
\begin_inset LatexCommand \index{MVC}

\end_inset 

) pattern called 
\emph on 
model-delegate
\emph default 
, where the view and the controller of the MVC-pattern are merged into one
 object.
\layout Standard
\align center 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
includegraphics[  scale=0.6]{/segfs/tango/doc/manual/full/atk/img/core-widget.eps}
\end_inset 


\layout Standard

This pattern made the choice of labor division quite easy: all non-graphic
 parts of TangoATK reside in the packages beneath 
\family typewriter 
fr.esrf.tangoatk.core
\family default 

\begin_inset LatexCommand \index{model}

\end_inset 


\begin_inset LatexCommand \index{core}

\end_inset 

, and anything remotely graphic are located beneath 
\family typewriter 
fr.esrf.tangoatk.widge
\family default 
t
\begin_inset LatexCommand \index{viewer}

\end_inset 


\begin_inset LatexCommand \index{widget}

\end_inset 

.
 More on the content and organization of this will follow.
\layout Standard

The communication between the non-graphic and graphic objects are done by
 having the graphic object registering itself as a listener to the non-graphic
 object, and the non-graphic object emmiting events telling the listeners
 that its state have changed.
\layout Subsection

Minimize development time
\layout Standard

For TangoATK to help minimize the development time of graphic applications,
 the toolkit has been developed along two lines of thought
\layout Itemize

Things that are needed in most applications are included, eg 
\family typewriter 
Splash
\family default 
, a splash
\begin_inset LatexCommand \index{splash}

\end_inset 

 window which gives a graphical way for the application to show the progress
 of a long operation.
 The splash window is moslty used in the startup phase of the application.
\layout Itemize

Building blocks provided by TangoATK should be easy to use and follow certain
 patterns, eg every graphic widget has a 
\family typewriter 
setModel
\family default 
 method which is used to connect the widget with its non-graphic model.
 
\layout Standard

In addition to this, TangoATK provides a framework for error handling, something
 that is often a time consuming task.
\layout Subsection

Minimize bugs in applications
\layout Standard

Together with the Tango API, TangoATK takes care of most of the hard things
 related to programming with Tango.
 Using TangoATK the developer can focus on developing her application, not
 on understanding Tango.
\layout Subsection

Attributes and commands from different devices
\layout Standard

To be able to create applications with attributes
\begin_inset LatexCommand \index{attributes}

\end_inset 

 and commands
\begin_inset LatexCommand \index{commands}

\end_inset 

 from different devices, it was decided that the central objects of TangoATK
 were not to be the device
\begin_inset LatexCommand \index{device}

\end_inset 

, but rather the 
\emph on 
attributes and the commands
\emph default 
.
 This will certainly feel a bit awkward at first, but trust me, the design
 holds.
\layout Standard

For this design to be feasible, a structure was needed to keep track of
 the commands and attributes, so the 
\emph on 
command-list
\begin_inset LatexCommand \index{command-list}

\end_inset 

 and the attribute-list
\begin_inset LatexCommand \index{attribte-list}

\end_inset 


\emph default 
 was introduced.
 These two objects can hold commands and attributes from any number of devices.
\layout Subsection

Avoid code duplication
\layout Standard

When writing applications for a control-system without a framework much
 code is duplicated.
 Anything from simple widgets for showing numeric values to error handling
 has to be implemented each time.
 TangoATK supplies a number of frequently used widgets along with a framework
 for connecting these widgets with their non-graphic counterparts.
 Because of this, the developer only needs to write the 
\emph on 
glue
\emph default 
 - the code which connects these objects in a manner that suits the specified
 application.
\layout Section

The real getting started
\layout Standard

Generally there are two kinds of end-user applications: Applications that
 only know how to treat one device, and applications that treat many devices.
\layout Subsection

Single device applications
\layout Standard

Single device applications are quite easy to write, even with a gui.
 The following steps are required
\layout Enumerate

Instantiate an AttributeList
\begin_inset LatexCommand \index{AttributeList}

\end_inset 

 and fill it with the attributes you want.
 
\layout Enumerate

Instantiate a CommandList
\begin_inset LatexCommand \index{CommandList}

\end_inset 

 and fill it with the commands you want.
 
\layout Enumerate

Connect the whole 
\emph on 
AttributeList
\emph default 
 with a 
\emph on 
list viewer
\emph default 
 and / or each 
\emph on 
individual attribute
\emph default 
 with an 
\emph on 
attribute viewer
\emph default 
.
 
\layout Enumerate

Connect the whole 
\emph on 
CommandList
\emph default 
 to a 
\emph on 
command list viewer
\emph default 
 and / or connect each 
\emph on 
individual command
\emph default 
 in the command list with a 
\emph on 
command viewer
\emph default 
.
 
\layout Standard
\align center 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
includegraphics[  scale=0.6]{/segfs/tango/doc/manual/full/atk/img/listpanel.eps}
\end_inset 


\layout Standard

The following program (FirstApplication)
\begin_inset LatexCommand \index{ScalarListViewer}

\end_inset 

 shows an implementation of the list mentioned above.
 It should be rather self-explanatory with the comments.
\layout Standard


\begin_inset Include \input{line.tex}
preview false

\end_inset 


\layout LyX-Code

package examples;
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

import javax.swing.JFrame;
\layout LyX-Code

import javax.swing.JMenuItem;
\layout LyX-Code

import javax.swing.JMenuBar;
\layout LyX-Code

import javax.swing.JMenu;
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

import java.awt.event.ActionListener;
\layout LyX-Code

import java.awt.event.ActionEvent;
\layout LyX-Code

import java.awt.BorderLayout;
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

import fr.esrf.tangoatk.core.AttributeList;
\layout LyX-Code

import fr.esrf.tangoatk.core.ConnectionException;
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

import fr.esrf.tangoatk.core.CommandList;
\layout LyX-Code

import fr.esrf.tangoatk.widget.util.ErrorHistory;
\layout LyX-Code

import fr.esrf.tangoatk.widget.util.ATKGraphicsUtils;
\layout LyX-Code

import fr.esrf.tangoatk.widget.attribute.ScalarListViewer;
\layout LyX-Code

import fr.esrf.tangoatk.widget.command.CommandComboViewer;
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

public class FirstApplication extends JFrame
\layout LyX-Code

{
\layout LyX-Code

JMenuBar menu;                    // So that our application looks
\layout LyX-Code

                                  // halfway decent.
\layout LyX-Code

AttributeList attributes;         // The list that will contain our
\layout LyX-Code

                                  // attributes
\layout LyX-Code

CommandList commands;             // The list that will contain our
\layout LyX-Code

                                  // commands
\layout LyX-Code

ErrorHistory errorHistory;        // A window that displays errors
\layout LyX-Code

ScalarListViewer sListViewer;     // A viewer which knows how to
\layout LyX-Code

                                  // display a list of scalar attributes.
\layout LyX-Code

                                  // If you want to display other types
\layout LyX-Code

                                  // than scalars, you'll have to wait
\layout LyX-Code

                                  // for the next example.
\layout LyX-Code

CommandComboViewer commandViewer; // A viewer which knows how to display
\layout LyX-Code

                                  // a combobox of commands and execute
\layout LyX-Code

                                  // them.
\layout LyX-Code

String device;                    // The name of our device.
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

public FirstApplication()
\layout LyX-Code

{
\layout LyX-Code

   // The swing stuff to create the menu bar and its pulldown menus
\layout LyX-Code

   menu = new JMenuBar();
\layout LyX-Code

   JMenu fileMenu = new JMenu();
\layout LyX-Code

   fileMenu.setText("File");   
\layout LyX-Code

   JMenu viewMenu = new JMenu();
\layout LyX-Code

   viewMenu.setText("View");
\layout LyX-Code

\layout LyX-Code

   JMenuItem quitItem = new JMenuItem();
\layout LyX-Code

   quitItem.setText("Quit");
\layout LyX-Code

   quitItem.addActionListener(new 
\layout LyX-Code

      java.awt.event.ActionListener()
\layout LyX-Code

      {                 
\layout LyX-Code

       public void
\layout LyX-Code

       actionPerformed(ActionEvent evt)
\layout LyX-Code

       {quitItemActionPerformed(evt);}
\layout LyX-Code

      });
\layout LyX-Code

   fileMenu.add(quitItem);
\layout LyX-Code

\layout LyX-Code

   JMenuItem errorHistItem = new JMenuItem();
\layout LyX-Code

   errorHistItem.setText("Error History");
\layout LyX-Code

   errorHistItem.addActionListener(new 
\layout LyX-Code

           java.awt.event.ActionListener()
\layout LyX-Code

           {                 
\layout LyX-Code

            public void 
\layout LyX-Code

            actionPerformed(ActionEvent evt)
\layout LyX-Code

            {errHistItemActionPerformed(evt);}
\layout LyX-Code

           });
\layout LyX-Code

   viewMenu.add(errorHistItem);
\layout LyX-Code

   menu.add(fileMenu);
\layout LyX-Code

   menu.add(viewMenu);
\layout LyX-Code

\layout LyX-Code

   //
\layout LyX-Code

   // Here we create ATK objects to handle attributes, commands and errors.
\layout LyX-Code

   //
\layout LyX-Code

   attributes = new AttributeList(); 
\layout LyX-Code

   commands = new CommandList();
\layout LyX-Code

   errorHistory = new ErrorHistory();
\layout LyX-Code

   device = "id14/eh3_mirror/1";
\layout LyX-Code

   sListViewer = new ScalarListViewer();
\layout LyX-Code

   commandViewer = new CommandComboViewer();
\layout LyX-Code

\layout LyX-Code

\layout LyX-Code

// 
\layout LyX-Code

// A feature of the command and attribute list is that if you
\layout LyX-Code

// supply an errorlistener to these lists, they'll add that
\layout LyX-Code

// errorlistener to all subsequently created attributes or
\layout LyX-Code

// commands.
 So it is important to do this _before_ you
\layout LyX-Code

// start adding attributes or commands.
\layout LyX-Code

//
\layout LyX-Code

 
\layout LyX-Code

   attributes.addErrorListener(errorHistory);
\layout LyX-Code

   commands.addErrorListener(errorHistory);
\layout LyX-Code

 
\layout LyX-Code

//
\layout LyX-Code

// Sometimes we're out of luck and the device or the attributes
\layout LyX-Code

// are not available.
 In that case a ConnectionException is thrown.
\layout LyX-Code

// This is why we add the attributes in a try/catch
\layout LyX-Code

//
\layout LyX-Code

 
\layout LyX-Code

   try
\layout LyX-Code

   {
\layout LyX-Code

 
\layout LyX-Code

//
\layout LyX-Code

// Another feature of the attribute and command list is that they
\layout LyX-Code

// can add wildcard names, currently only `*' is supported.
\layout LyX-Code

// When using a wildcard, the lists will add all commands or
\layout LyX-Code

// attributes available on the device.
\layout LyX-Code

//
\layout LyX-Code

   attributes.add(device + "/*");
\layout LyX-Code

   }
\layout LyX-Code

   catch (ConnectionException ce)
\layout LyX-Code

   {
\layout LyX-Code

      System.out.println("Error fetching " + 
\layout LyX-Code

                         "attributes from " +
\layout LyX-Code

                         device + " " + ce);
\layout LyX-Code

   }
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

//
\layout LyX-Code

// See the comments for attributelist
\layout LyX-Code

//
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

   try
\layout LyX-Code

   {
\layout LyX-Code

      commands.add(device + "/*");
\layout LyX-Code

   }
\layout LyX-Code

   catch (ConnectionException ce)
\layout LyX-Code

   {
\layout LyX-Code

      System.out.println("Error fetching " +
\layout LyX-Code

                         "commands from " +
\layout LyX-Code

                         device + " " + ce);
\layout LyX-Code

   }
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

//
\layout LyX-Code

// Here we tell the scalarViewer what it's to show.
 The
\layout LyX-Code

// ScalarListViewer loops through the attribute-list and picks out
\layout LyX-Code

// the ones which are scalars and show them.
\layout LyX-Code

//
\layout LyX-Code

\layout LyX-Code

   sListViewer.setModel(attributes);
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

//
\layout LyX-Code

// This is where the CommandComboViewer is told what it's to
\layout LyX-Code

// show.
 It knows how to show and execute most commands.
\layout LyX-Code

//
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

   commandViewer.setModel(commands);
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

//
\layout LyX-Code

// add the menubar to the frame
\layout LyX-Code

//
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

   setJMenuBar(menu);
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

//
\layout LyX-Code

// Make the layout nice.
\layout LyX-Code

//
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

   getContentPane().setLayout(new BorderLayout());
\layout LyX-Code

   getContentPane().add(commandViewer, BorderLayout.NORTH);
\layout LyX-Code

   getContentPane().add(sListViewer, BorderLayout.SOUTH);
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

//
\layout LyX-Code

// A third feature of the attributelist is that it knows how
\layout LyX-Code

// to refresh its attributes.
\layout LyX-Code

//
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

   attributes.startRefresher();
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

//
\layout LyX-Code

// JFrame stuff to make the thing show.
\layout LyX-Code

//
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

   pack();
\layout LyX-Code

   ATKGraphicsUtils.centerFrameOnScreen(this); //ATK utility to center window
\layout LyX-Code

\layout LyX-Code

   show();
\layout LyX-Code

   }
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

   public static void main(String [] args)
\layout LyX-Code

   {
\layout LyX-Code

      new FirstApplication();
\layout LyX-Code

   }
\layout LyX-Code

\layout LyX-Code

   public void quitItemActionPerformed(ActionEvent evt)
\layout LyX-Code

   {
\layout LyX-Code

      System.exit(0);
\layout LyX-Code

   }
\layout LyX-Code

\layout LyX-Code

   public void errHistItemActionPerformed(ActionEvent evt)
\layout LyX-Code

   {
\layout LyX-Code

      errorHistory.setVisible(true);
\layout LyX-Code

   }
\layout LyX-Code

}
\layout LyX-Code

\layout LyX-Code

\layout LyX-Code

\layout Standard


\begin_inset Include \input{line.tex}
preview false

\end_inset 


\layout Standard

The program should look something like this (depending on your platform
 and your device)
\layout Standard
\align center 

\begin_inset Graphics
	filename img/prog_guide_exple1.jpg
	scale 75

\end_inset 


\layout Subsection

Multi device applications
\layout Standard

Multi device applications are quite similar to the single device applications,
 the only difference is that it does not suffice to add the attributes by
 wildcard, you need to add them explicitly, like this: 
\newline 

\layout Standard


\begin_inset Include \input{line.tex}
preview false

\end_inset 


\layout LyX-Code

try
\layout LyX-Code

{ 
\layout LyX-Code

    // a StringScalar attribute from the device one
\layout LyX-Code

   attributes.add("jlp/test/1/att_cinq");
\layout LyX-Code

   // a NumberSpectrum attribute from the device one
\layout LyX-Code

   attributes.add("jlp/test/1/att_spectrum");
\layout LyX-Code

   // a NumberImage attribute from the device two
\layout LyX-Code

   attributes.add("sr/d-ipc/id25-1n/Image");
\layout LyX-Code

}
\layout LyX-Code

catch (ConnectionException ce)
\layout LyX-Code

{
\layout LyX-Code

   System.out.println("Error fetching " + 
\layout LyX-Code

       "attributes" + ce);
\layout LyX-Code

}
\layout LyX-Code

\layout Standard


\begin_inset Include \input{line.tex}
preview false

\end_inset 


\layout Standard

The same goes for commands.
\layout Subsection

More on displaying attributes
\layout Standard

So far, we've only considered scalar
\begin_inset LatexCommand \index{scalar}

\end_inset 

 attributes, and not only that, we've also cheated quite a bit since we
 just passed the attribute list to the 
\family typewriter 
fr.esrf.tangoatk.widget.attribute.ScalarListViewer
\family default 
 and let it do all the magic.
 The attribute list viewers are only available for scalar attributes (NumberScal
arListViewer
\begin_inset LatexCommand \index{NumberScalarListViewer}

\end_inset 

 and ScalarListViewer
\begin_inset LatexCommand \index{ScalarListViewer}

\end_inset 

).
 If you have one or several spectrum
\begin_inset LatexCommand \index{spectrum}

\end_inset 

 or image
\begin_inset LatexCommand \index{image}

\end_inset 

 attributes you must connect each spectrum or image attribute to it's correspond
ing attribute viewer individually.
 So let's take a look at how you can connect individual attributes (and
 not a whole attribute list) to an individual attribute viewer (and not
 to an attribute list viewer).
\layout Subsubsection

Connecting an attribute
\begin_inset LatexCommand \index{model}

\end_inset 

 to a viewer
\begin_inset LatexCommand \index{viewer}

\end_inset 


\layout Standard

Generally it is done in the following way:
\layout Enumerate

You retrieve the attribute from the attribute list 
\layout Enumerate

You instantiate the viewer 
\layout Enumerate

Your call the 
\family typewriter 
setModel
\begin_inset LatexCommand \index{setModel}

\end_inset 


\family default 
 method on the viewer with the attribute as argument.
 
\layout Enumerate

You add your viewer to some panel
\layout Standard

The following example (SecondApplication)
\begin_inset LatexCommand \index{SimpleScalarViewer}

\end_inset 


\begin_inset LatexCommand \index{NumberImageViewer}

\end_inset 


\begin_inset LatexCommand \index{NumberSpectrumViewer}

\end_inset 

, is a Multi-device application.
 Since this application uses individual attribute viewers and not an attribute
 list viewer, it shows an implementation of the list mentioned above.
\layout Standard


\begin_inset Include \input{line.tex}
preview false

\end_inset 


\layout LyX-Code

package examples;
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

import javax.swing.JFrame;
\layout LyX-Code

import javax.swing.JMenuItem;
\layout LyX-Code

import javax.swing.JMenuBar;
\layout LyX-Code

import javax.swing.JMenu;
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

import java.awt.event.ActionListener;
\layout LyX-Code

import java.awt.event.ActionEvent;
\layout LyX-Code

import java.awt.BorderLayout;
\layout LyX-Code

import java.awt.Color;
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

import fr.esrf.tangoatk.core.AttributeList;
\layout LyX-Code

import fr.esrf.tangoatk.core.ConnectionException;
\layout LyX-Code

 
\layout LyX-Code

import fr.esrf.tangoatk.core.IStringScalar;
\layout LyX-Code

import fr.esrf.tangoatk.core.INumberSpectrum;
\layout LyX-Code

import fr.esrf.tangoatk.core.INumberImage;
\layout LyX-Code

import fr.esrf.tangoatk.widget.util.ErrorHistory;
\layout LyX-Code

import fr.esrf.tangoatk.widget.util.Gradient;
\layout LyX-Code

import fr.esrf.tangoatk.widget.util.ATKGraphicsUtils;
\layout LyX-Code

import fr.esrf.tangoatk.widget.attribute.NumberImageViewer;
\layout LyX-Code

import fr.esrf.tangoatk.widget.attribute.NumberSpectrumViewer;
\layout LyX-Code

import fr.esrf.tangoatk.widget.attribute.SimpleScalarViewer;
\layout LyX-Code

\layout LyX-Code

public class SecondApplication extends JFrame
\layout LyX-Code

{
\layout LyX-Code

     JMenuBar            menu;
\layout LyX-Code

     AttributeList       attributes;   // The list that will contain our
 attributes
\layout LyX-Code

     ErrorHistory        errorHistory; // A window that displays errors
\layout LyX-Code

     IStringScalar        ssAtt;
\layout LyX-Code

     INumberSpectrum      nsAtt;
\layout LyX-Code

     INumberImage         niAtt;
\layout LyX-Code

     public SecondApplication()
\layout LyX-Code

     {
\layout LyX-Code

        // Swing stuff to create the menu bar and its pulldown menus
\layout LyX-Code

        menu = new JMenuBar();
\layout LyX-Code

        JMenu fileMenu = new JMenu();
\layout LyX-Code

        fileMenu.setText("File");   
\layout LyX-Code

        JMenu viewMenu = new JMenu();
\layout LyX-Code

        viewMenu.setText("View");
\layout LyX-Code

        JMenuItem quitItem = new JMenuItem();
\layout LyX-Code

        quitItem.setText("Quit");
\layout LyX-Code

        quitItem.addActionListener(new java.awt.event.ActionListener()
\layout LyX-Code

                                      {                 
\layout LyX-Code

                                       public void actionPerformed(ActionEvent
 evt)
\layout LyX-Code

                                       {quitItemActionPerformed(evt);}
\layout LyX-Code

                                      });
\layout LyX-Code

\layout LyX-Code

        fileMenu.add(quitItem);
\layout LyX-Code

        JMenuItem errorHistItem = new JMenuItem();
\layout LyX-Code

        errorHistItem.setText("Error History");
\layout LyX-Code

        errorHistItem.addActionListener(new java.awt.event.ActionListener()
\layout LyX-Code

                {                 
\layout LyX-Code

                 public void actionPerformed(ActionEvent evt)
\layout LyX-Code

                 {errHistItemActionPerformed(evt);}
\layout LyX-Code

                });
\layout LyX-Code

        viewMenu.add(errorHistItem);
\layout LyX-Code

        menu.add(fileMenu);
\layout LyX-Code

        menu.add(viewMenu);
\layout LyX-Code

      //
\layout LyX-Code

      // Here we create TangoATK objects to view attributes and errors.
\layout LyX-Code

      //
\layout LyX-Code

        attributes = new AttributeList(); 
\layout LyX-Code

        errorHistory = new ErrorHistory();
\layout LyX-Code

      //
\layout LyX-Code

      // We create a SimpleScalarViewer, a NumberSpectrumViewer and
\layout LyX-Code

      // a NumberImageViewer, since we already knew that we were
\layout LyX-Code

      // playing with a scalar attribute, a number spectrum attribute
\layout LyX-Code

      // and a number image attribute this time.
\layout LyX-Code

      //
\layout LyX-Code

      SimpleScalarViewer     ssViewer = new SimpleScalarViewer();
\layout LyX-Code

        NumberSpectrumViewer   nSpectViewer = new NumberSpectrumViewer();
\layout LyX-Code

        NumberImageViewer      nImageViewer = new NumberImageViewer();
\layout LyX-Code

        attributes.addErrorListener(errorHistory);
\layout LyX-Code

     //
\layout LyX-Code

     // The attribute (and command) list has the feature of returning the
 last
\layout LyX-Code

     // attribute that was added to it.
 Just remember that it is returned as an
\layout LyX-Code

     // IEntity object, so you need to cast it into a more specific object,
 like
\layout LyX-Code

     // IStringScalar, which is the interface which defines a string scalar
\layout LyX-Code

     //
\layout LyX-Code

       try
\layout LyX-Code

        {
\layout LyX-Code

\layout LyX-Code

           ssAtt = (IStringScalar) attributes.add("jlp/test/1/att_cinq");
\layout LyX-Code

           nsAtt = (INumberSpectrum) attributes.add("jlp/test/1/att_spectrum");
\layout LyX-Code

           niAtt = (INumberImage) attributes.add("sr/d-ipc/id25-1n/Image");
\layout LyX-Code

        }
\layout LyX-Code

        catch (ConnectionException ce)
\layout LyX-Code

        {
\layout LyX-Code

           System.out.println("Error fetching one of the attributes  "+" "
 + ce);
\layout LyX-Code

           System.out.println("Application Aborted.");
\layout LyX-Code

           System.exit(0);
\layout LyX-Code

        }        
\layout LyX-Code

        //
\layout LyX-Code

        // Pay close attention to the following three lines!! This is how
 it's done!
\layout LyX-Code

        // This is how it's always done! The setModel
\begin_inset LatexCommand \index{setModel}

\end_inset 

 method of any viewer takes care
\layout LyX-Code

       // of connecting the viewer to the attribute (model) it's in charge
 of displaying.
\layout LyX-Code

       // This is the way to tell each viewer what (which attribute) it
 has to show.
\layout LyX-Code

       // Note that we use a viewer adapted to each type of attribute
\layout LyX-Code

       //
\layout LyX-Code

        ssViewer.setModel(ssAtt);
\layout LyX-Code

        nSpectViewer.setModel(nsAtt);
\layout LyX-Code

        nImageViewer.setModel(niAtt);
\layout LyX-Code

     //
\layout LyX-Code

        nSpectViewer.setPreferredSize(new java.awt.Dimension(400, 300));
\layout LyX-Code

        nImageViewer.setPreferredSize(new java.awt.Dimension(500, 300));
\layout LyX-Code

        Gradient  g = new Gradient();
\layout LyX-Code

        g.buidColorGradient();
\layout LyX-Code

        g.setColorAt(0,Color.black);
\layout LyX-Code

        nImageViewer.setGradient(g);
\layout LyX-Code

        nImageViewer.setBestFit(true);
\layout LyX-Code

\layout LyX-Code

        //
\layout LyX-Code

        // Add the viewers into the frame to show them
\layout LyX-Code

        //
\layout LyX-Code

        getContentPane().setLayout(new BorderLayout());
\layout LyX-Code

        getContentPane().add(ssViewer, BorderLayout.SOUTH);
\layout LyX-Code

        getContentPane().add(nSpectViewer, BorderLayout.CENTER);
\layout LyX-Code

        getContentPane().add(nImageViewer, BorderLayout.EAST);
\layout LyX-Code

        //
\layout LyX-Code

        // To have the attributes values refreshed we should start the
\layout LyX-Code

        // attribute list's refresher.
\layout LyX-Code

        //
\layout LyX-Code

        attributes.startRefresher();
\layout LyX-Code

        //
\layout LyX-Code

        // add the menubar to the frame
\layout LyX-Code

        //
\layout LyX-Code

        setJMenuBar(menu);
\layout LyX-Code

        //
\layout LyX-Code

        // JFrame stuff to make the thing show.
\layout LyX-Code

        //
\layout LyX-Code

        pack();
\layout LyX-Code

        ATKGraphicsUtils.centerFrameOnScreen(this); //ATK utility to center
 window
\layout LyX-Code

        show();
\layout LyX-Code

     }
\layout LyX-Code

     public static void main(String [] args)
\layout LyX-Code

     {
\layout LyX-Code

        new SecondApplication();
\layout LyX-Code

     }
\layout LyX-Code

     public void quitItemActionPerformed(ActionEvent evt)
\layout LyX-Code

     {
\layout LyX-Code

        System.exit(0);
\layout LyX-Code

     }
\layout LyX-Code

     public void errHistItemActionPerformed(ActionEvent evt)
\layout LyX-Code

     {
\layout LyX-Code

        errorHistory.setVisible(true);
\layout LyX-Code

     }
\layout LyX-Code

}
\layout LyX-Code

\layout LyX-Code

\layout LyX-Code

\layout LyX-Code

\layout Standard


\begin_inset Include \input{line.tex}
preview false

\end_inset 


\layout Standard

This program (SeondApplication) should look something like this (depending
 on your platform and your device attributes)
\newline 

\layout Standard


\begin_inset Graphics
	filename img/prog_guide_exple2.jpg
	lyxscale 75
	scale 50

\end_inset 


\layout LyX-Code

\layout Subsubsection

Synoptic
\begin_inset LatexCommand \index{Synoptic}

\end_inset 

 viewer
\layout Standard

TangoATK provides a generic class to view and to animate the synoptics.
 The name of this class is fr.esrf.tangoatk.widget.jdraw.SynopticFileViewer
\begin_inset LatexCommand \index{SynopticFileViewer}

\end_inset 

.
 This class is based on a 
\begin_inset Quotes eld
\end_inset 

home-made
\begin_inset Quotes erd
\end_inset 

 graphical layer called jdraw
\begin_inset LatexCommand \index{jdraw}

\end_inset 

.
 The jdraw package is also included inside TangoATK distribution.
\layout Standard

SynopticFileViewer is a panel containing a TangoSynopticHandler instance.
 All the work for connection to tango devices and run time animation is
 done inside the TangoSynopticHandler.
\layout Standard

The recipe for using the TangoATK synoptic viewer is the following
\layout Enumerate

You use Jdraw graphical editor to draw your synoptic 
\layout Enumerate

During drawing phase don't forget to associate parts of the drawing to tango
 devices, attributes or commands.
 Use the 
\begin_inset Quotes eld
\end_inset 

name
\begin_inset Quotes erd
\end_inset 

 property to do this
\layout Enumerate

During drawing phase you can also aasociate a class (frequently a 
\begin_inset Quotes eld
\end_inset 

specific panel
\begin_inset Quotes erd
\end_inset 

 class) which will be displayed when the user clicks on some part of the
 drawing.
 Use the 
\begin_inset Quotes eld
\end_inset 

extension
\begin_inset Quotes erd
\end_inset 

 property to do this.
\layout Enumerate

Save the drawing file.
\layout Enumerate

You can now develop a simple TangoATK based application which instantiates
 the SynopticFileViewer and gives it the name of the synoptic file (drawing
 file) and the directory where it resides.
\layout Standard

The SynopticFilerViewer will browse the objects in the synoptic file at
 run time.
 It discovers if some parts of the drawing is associated with a device,
 or an attribute or a command.
 In this case it will automatically connect to the corresponding device,
 attribute or command.
 Once the connection is successfull SynopticFileViewer will animate the
 synoptic according to the default behaviour described below :
\layout Itemize

For 
\emph on 
tango devices
\begin_inset LatexCommand \index{device}

\end_inset 


\emph default 
 : the colour of the drawing object reflects the state of the tango device.
 A mouse click on the drawing object associated with the tango device will
 instantiate and display the class specified during the drawing phase.
 If no class is specified the atkpanel generic device panel is displayed.
\layout Itemize

For 
\emph on 
tango attributes
\begin_inset LatexCommand \index{attributes}

\end_inset 


\emph default 
 : the current value of the attribute is displayed through the drawing object
\layout Itemize

For 
\emph on 
tango commands
\begin_inset LatexCommand \index{commands}

\end_inset 


\emph default 
 : the mouse click on the drawing object associated with the command will
 launch the device command.
\layout Itemize

If the tooltip
\begin_inset LatexCommand \index{tooltip}

\end_inset 

 property is set to 
\begin_inset Quotes eld
\end_inset 

name
\begin_inset Quotes erd
\end_inset 

 when the mouse enters 
\emph on 
any tango object
\emph default 
 (device, attribute or command), inside the synoptic drawing the name of
 the tango object is displayed in a tooltip.
\layout Standard

The following example (ThirdApplication), is a Synoptic
\begin_inset LatexCommand \index{SynopticFileViewer}

\end_inset 


\begin_inset LatexCommand \index{Synoptic}

\end_inset 

 application.
 We assume that the synoptic has already been drawn using Jdraw graphical
 editor.
\layout Standard


\begin_inset Include \input{line.tex}
preview false

\end_inset 


\layout LyX-Code

package examples;
\layout LyX-Code

import java.io.*;
\layout LyX-Code

import java.util.*;
\layout LyX-Code

import javax.swing.JFrame;
\layout LyX-Code

import javax.swing.JMenuItem;
\layout LyX-Code

import javax.swing.JMenuBar;
\layout LyX-Code

import javax.swing.JMenu;
\layout LyX-Code

import java.awt.event.ActionListener;
\layout LyX-Code

import java.awt.event.ActionEvent;
\layout LyX-Code

import java.awt.BorderLayout;
\layout LyX-Code

import fr.esrf.tangoatk.widget.util.ErrorHistory;
\layout LyX-Code

import fr.esrf.tangoatk.widget.util.ATKGraphicsUtils;
\layout LyX-Code

import fr.esrf.tangoatk.widget.jdraw.SynopticFileViewer;
\layout LyX-Code

import fr.esrf.tangoatk.widget.jdraw.TangoSynopticHandler;
\layout LyX-Code

public class ThirdApplication extends JFrame
\layout LyX-Code

{
\layout LyX-Code

     JMenuBar              menu;
\layout LyX-Code

     ErrorHistory          errorHistory;  // A window that displays errors
\layout LyX-Code

     SynopticFileViewer    sfv;           // TangoATK generic synoptic viewer
\layout LyX-Code

     
\layout LyX-Code

     
\layout LyX-Code

     public ThirdApplication()
\layout LyX-Code

     {
\layout LyX-Code

        // Swing stuff to create the menu bar and its pulldown menus
\layout LyX-Code

        menu = new JMenuBar();
\layout LyX-Code

        JMenu fileMenu = new JMenu();
\layout LyX-Code

        fileMenu.setText("File");   
\layout LyX-Code

        JMenu viewMenu = new JMenu();
\layout LyX-Code

        viewMenu.setText("View");
\layout LyX-Code

        JMenuItem quitItem = new JMenuItem();
\layout LyX-Code

        quitItem.setText("Quit");
\layout LyX-Code

        quitItem.addActionListener(new java.awt.event.ActionListener()
\layout LyX-Code

                                      {                 
\layout LyX-Code

                                       public void actionPerformed(ActionEvent
 evt)
\layout LyX-Code

                                       {quitItemActionPerformed(evt);}
\layout LyX-Code

                                      });
\layout LyX-Code

        fileMenu.add(quitItem);
\layout LyX-Code

        JMenuItem errorHistItem = new JMenuItem();
\layout LyX-Code

        errorHistItem.setText("Error History");
\layout LyX-Code

        errorHistItem.addActionListener(new java.awt.event.ActionListener()
\layout LyX-Code

                {                 
\layout LyX-Code

                 public void actionPerformed(ActionEvent evt)
\layout LyX-Code

                 {errHistItemActionPerformed(evt);}
\layout LyX-Code

                });
\layout LyX-Code

        viewMenu.add(errorHistItem);
\layout LyX-Code

        menu.add(fileMenu);
\layout LyX-Code

        menu.add(viewMenu);
\layout LyX-Code

        //
\layout LyX-Code

        // Here we create TangoATK synoptic viewer and error window.
\layout LyX-Code

        //
\layout LyX-Code

        errorHistory = new ErrorHistory();
\layout LyX-Code

        sfv = new SynopticFileViewer();
\layout LyX-Code

        try
\layout LyX-Code

        {
\layout LyX-Code

            sfv.setErrorWindow(errorHistory);
\layout LyX-Code

        }
\layout LyX-Code

        catch (Exception setErrwExcept)
\layout LyX-Code

        {
\layout LyX-Code

            System.out.println("Cannot set Error History Window");
\layout LyX-Code

        }
\layout LyX-Code

        //
\layout LyX-Code

        // Here we tell the synoptic viewer where is located the synoptic
 file.
\layout LyX-Code

        //
\layout LyX-Code

        
\layout LyX-Code

        sfv.setJdrawDir("/users/poncet/ATK_OLD/jdraw_files");
\layout LyX-Code

        //      
\layout LyX-Code

        // Here we define the name of the synoptic file to show and the
 tooltip mode to use
\layout LyX-Code

        //
\layout LyX-Code

        
\layout LyX-Code

        try
\layout LyX-Code

        {     
\layout LyX-Code

          sfv.setJdrawFileName("id14.jdw");
\layout LyX-Code

          sfv.setToolTipMode (TangoSynopticHandler.TOOL_TIP_NAME);
\layout LyX-Code

        }
\layout LyX-Code

        catch (FileNotFoundException  fnfEx)
\layout LyX-Code

        {
\layout LyX-Code

           javax.swing.JOptionPane.showMessageDialog(
\layout LyX-Code

              null, "Cannot find the synoptic file : id14.jdw.
\backslash 
n"
\layout LyX-Code

                   + "Check the file name you entered;"
\layout LyX-Code

                   + " Application will abort ...
\backslash 
n"
\layout LyX-Code

                   + fnfEx,
\layout LyX-Code

                   "No such file",
\layout LyX-Code

                   javax.swing.JOptionPane.ERROR_MESSAGE);
\layout LyX-Code

           System.exit(-1);
\layout LyX-Code

        }
\layout LyX-Code

        catch (IllegalArgumentException  illEx)
\layout LyX-Code

        {
\layout LyX-Code

           javax.swing.JOptionPane.showMessageDialog(
\layout LyX-Code

              null, "Cannot parse the synoptic file : id14.jdw.
\backslash 
n"
\layout LyX-Code

                   + "Check if the file is a Jdraw file."
\layout LyX-Code

                   + " Application will abort ...
\backslash 
n"
\layout LyX-Code

                   + illEx,
\layout LyX-Code

                   "Cannot parse the file",
\layout LyX-Code

                   javax.swing.JOptionPane.ERROR_MESSAGE);
\layout LyX-Code

           System.exit(-1);
\layout LyX-Code

        }
\layout LyX-Code

        catch (MissingResourceException  mrEx)
\layout LyX-Code

        {
\layout LyX-Code

           javax.swing.JOptionPane.showMessageDialog(
\layout LyX-Code

              null, "Cannot parse the synoptic file : id14.jdw.
\backslash 
n"
\layout LyX-Code

                   + " Application will abort ...
\backslash 
n"
\layout LyX-Code

                   + mrEx,
\layout LyX-Code

                   "Cannot parse the file",
\layout LyX-Code

                   javax.swing.JOptionPane.ERROR_MESSAGE);
\layout LyX-Code

           System.exit(-1);
\layout LyX-Code

        }
\layout LyX-Code

        //
\layout LyX-Code

        // Add the viewers into the frame to show them
\layout LyX-Code

        //
\layout LyX-Code

        getContentPane().setLayout(new BorderLayout());
\layout LyX-Code

        getContentPane().add(sfv, BorderLayout.CENTER);
\layout LyX-Code

        //
\layout LyX-Code

        // add the menubar to the frame
\layout LyX-Code

        //
\layout LyX-Code

        setJMenuBar(menu);
\layout LyX-Code

        //
\layout LyX-Code

        // JFrame stuff to make the thing show.
\layout LyX-Code

        //
\layout LyX-Code

        pack();
\layout LyX-Code

        ATKGraphicsUtils.centerFrameOnScreen(this); //TangoATK utility to
 center window
\layout LyX-Code

        show();
\layout LyX-Code

     }
\layout LyX-Code

     public static void main(String [] args)
\layout LyX-Code

     {
\layout LyX-Code

        new ThirdApplication();
\layout LyX-Code

     }
\layout LyX-Code

     public void quitItemActionPerformed(ActionEvent evt)
\layout LyX-Code

     {
\layout LyX-Code

        System.exit(0);
\layout LyX-Code

     }
\layout LyX-Code

     public void errHistItemActionPerformed(ActionEvent evt)
\layout LyX-Code

     {
\layout LyX-Code

        errorHistory.setVisible(true);
\layout LyX-Code

     }
\layout LyX-Code

}
\layout LyX-Code


\begin_inset Include \input{line.tex}
preview false

\end_inset 


\newline 

\newline 

\layout Standard

The synoptic
\begin_inset LatexCommand \index{synoptic}

\end_inset 

 application (ThirdApplication) should look something like this (depending
 on your synoptic drawing file)
\newline 

\newline 

\begin_inset Graphics
	filename img/prog_guide_exple3.jpg
	lyxscale 75
	scale 40

\end_inset 


\layout Subsection

A short note on the relationship between models and viewers
\layout Standard

As seen in the examples above, the connection between a model
\begin_inset LatexCommand \index{model}

\end_inset 

 and its viewer
\begin_inset LatexCommand \index{viewer}

\end_inset 

 is generally done by calling 
\family typewriter 
setModel
\begin_inset LatexCommand \index{setModel}

\end_inset 

(model
\begin_inset LatexCommand \index{model}

\end_inset 

)
\family default 
 on the viewer
\begin_inset LatexCommand \index{viewer}

\end_inset 

, it is never explained what happens behind the scenes when this is done.
\layout Subsubsection

Listeners
\layout Standard

Most of the viewers
\begin_inset LatexCommand \index{viewer}

\end_inset 

 implement some sort of 
\emph on 
listener
\begin_inset LatexCommand \index{listener}

\end_inset 


\emph default 
 interface, eg INumberScalarListener
\begin_inset LatexCommand \index{INumberScalarListener}

\end_inset 

.
 An object implementing such a listener interface has the capability of
 receiving and treating 
\emph on 
events
\begin_inset LatexCommand \index{event}

\end_inset 


\emph default 
 from a model
\begin_inset LatexCommand \index{model}

\end_inset 

 which emits events.
\layout Standard


\begin_inset Include \input{line.tex}
preview false

\end_inset 


\layout LyX-Code

// this is the setModel of a SimpleScalarViewer
\layout LyX-Code

  public void setModel
\begin_inset LatexCommand \index{setModel}

\end_inset 

(INumberScalar scalar) {
\layout LyX-Code

\layout LyX-Code

    clearModel();
\layout LyX-Code

\layout LyX-Code

    if (scalar != null) {
\layout LyX-Code

      format = scalar.getProperty("format").getPresentation();
\layout LyX-Code

      numberModel = scalar;
\layout LyX-Code

 
\layout LyX-Code

   // this is where the viewer connects itself to the 
\layout LyX-Code

   // model.
 After this the viewer will (hopefully) receive 
\layout LyX-Code

   // events through its numberScalarChange() method
\layout LyX-Code

\layout LyX-Code

   numberModel.addNumberScalarListener(this);
\layout LyX-Code

 
\layout LyX-Code

      
\layout LyX-Code

        numberModel.getProperty("format").addPresentationListener(this);
\layout LyX-Code

      numberModel.getProperty("unit").addPresentationListener(this);
\layout LyX-Code

    }
\layout LyX-Code

\layout LyX-Code

  }
\layout LyX-Code

 
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

// Each time the model of this viewer (the numberscalar attribute) decides
 it is time, it 
\layout LyX-Code

// calls the numberScalarChange method of all its registered listeners
\layout LyX-Code

// with a NumberScalarEvent object which contains the 
\layout LyX-Code

// the new value of the numberscalar attribute.
\layout LyX-Code

//
\layout LyX-Code

 
\layout LyX-Code

  public void numberScalarChange(NumberScalarEvent evt) {
\layout LyX-Code

    String val;
\layout LyX-Code

    val = getDisplayString(evt);
\layout LyX-Code

    if (unitVisible) {
\layout LyX-Code

      setText(val + " " + numberModel.getUnit());
\layout LyX-Code

    } else {
\layout LyX-Code

      setText(val);
\layout LyX-Code

    }
\layout LyX-Code

  }
\layout LyX-Code

\layout LyX-Code

\layout LyX-Code

\layout Standard


\begin_inset Include \input{line.tex}
preview false

\end_inset 


\layout Standard

All listeners in TangoATK implement the 
\family typewriter 
IErrorListener
\family default 
 interface which specifies the 
\family typewriter 
errorChange(ErrorEvent e)
\family default 
 method.
 This means that all listeners are forced to handle errors in some way or
 another.
\layout Section

The key objects of TangoATK
\layout Standard

As seen from the examples above, the key objects of TangoATK are the 
\family typewriter 
CommandList
\begin_inset LatexCommand \index{CommandList}

\end_inset 


\family default 
 and the 
\family typewriter 
AttributeList
\family default 

\begin_inset LatexCommand \index{AttributeList}

\end_inset 

.
 These two classes inherit from the abstract class 
\family typewriter 
AEntityList
\family default 
 which implements all of the common functionality between the two lists.
 These lists use the functionality of the 
\family typewriter 
CommandFactory
\family default 
, the 
\family typewriter 
AttributeFactory
\family default 
, which both derive from 
\family typewriter 
AEntityFactory,
\family default 
 and the 
\family typewriter 
DeviceFactory
\family default 
.
\layout Standard

In addition to these factories and lists there is one (for the time being)
 other important functionality lurking around, the refreshers.
\layout Subsection

The Refreshers
\layout Standard

The refreshers
\begin_inset LatexCommand \index{refresher}

\end_inset 

, represented in TangoATK by the 
\family typewriter 
Refresher
\family default 
 object, is simply a subclass of 
\family typewriter 
java.lang.Thread
\family default 
 which will sleep for a given amount of time and then call a method refresh
 on whatever kind of 
\family typewriter 
IRefreshee
\family default 
 it has been given as parameter, as shown below
\layout Standard


\begin_inset Include \input{line.tex}
preview false

\end_inset 


\layout LyX-Code

// This is an example from DeviceFactory.
\layout LyX-Code

// We create a new Refresher with the name "device"
\layout LyX-Code

// We add ourself to it, and start the thread
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

Refresher refresher = new Refresher("device");
\layout LyX-Code

refresher.addRefreshee(this).start();
\layout LyX-Code

\layout Standard


\begin_inset Include \input{line.tex}
preview false

\end_inset 


\layout Standard

Both the 
\family typewriter 
AttributeList
\begin_inset LatexCommand \index{AttributeList}

\end_inset 


\family default 
 and the 
\family typewriter 
DeviceFactory
\family default 
 implement the 
\family typewriter 
IRefreshee
\family default 
 interface which specify only one method, 
\family typewriter 
refresh()
\family default 
, and can thus be refreshed by the 
\family typewriter 
Refresher
\family default 

\begin_inset LatexCommand \index{refresher}

\end_inset 

.
 Even if the new release of TangoATK is based on the Tango Events
\begin_inset LatexCommand \index{event}

\end_inset 


\begin_inset LatexCommand \index{Tango-Event}

\end_inset 

, the refresher mecanisme will not be removed yet.
 As a matter of fact, the method refresh() implemented in 
\noun on 
AttributeList
\noun default 
 skips all attributes (members of the list) for which the subscribe
\begin_inset LatexCommand \index{subscribe}

\end_inset 

 to the tango event has succeeded and calls the old refresh() method for
 the others (for which subscribe to tango events has failed).
 In a first stage this will allow the TangoATK applications to mix the use
 of the old tango device servers (which do not implement tango events) and
 the new ones in the same code.
 In other words, TangoATK subscribes for tango events if possible otherwise
 TangoATK will refresh the attributes through the old refresher mecanisme.
\layout Standard

The 
\family typewriter 
AttributePolledList 
\family default 
class allows the application programmer to force explicitly the use of the
 refresher method for all attributes added in an AttributePolledList even
 if the corresponding device servers implement tango events.
 Some viewers (fr.esrf.tangoatk.widget.attribute.Trend) needs an AttributePolledList
 in order to force the refresh of the attribute without using tango events.
\layout Subsubsection

What happens on a refresh
\layout Standard

When 
\family typewriter 
refresh
\begin_inset LatexCommand \index{refresh}

\end_inset 


\family default 
 is called on the 
\family typewriter 
AttributeList
\family default 
 and the 
\family typewriter 
DeviceFactory
\family default 
, they loop through their objects, 
\family typewriter 
IAttributes
\family default 
 and 
\family typewriter 
IDevices
\family default 
, respectively, and ask them to refresh themselves if they are not event
 driven.
 When 
\noun on 
AttributeFactory
\noun default 
, respectively, 
\noun on 
DeviceFactory
\noun default 
 creates an 
\family typewriter 
IAttribute
\family default 
 / 
\family typewriter 
IDevice
\family default 
, TangoATK tries to subscribe for Tango Change event for that attribute
 (or device).
 If the subscription succeeds then the attribute (or device) is marked as
 event driven.
 In the 
\noun on 
refresh()
\noun default 
 method of the 
\noun on 
AttributeList
\noun default 
 and the 
\noun on 
DeviceFactory
\noun default 
 during the loop through the objects if the object is marked event driven
 then the object is simply skipped.
 But if the object (attribute or device) is not marked as event driven,
 the 
\noun on 
refresh()
\noun default 
 method of the 
\noun on 
AttributeList
\noun default 
, respectively, 
\noun on 
DeviceFactory
\noun default 
 ask the object to refresh itself by calling the 
\begin_inset Quotes eld
\end_inset 


\noun on 
refresh()
\noun default 

\begin_inset Quotes erd
\end_inset 

 method of that object (attribute or device).
\layout Standard

The 
\noun on 
refresh()
\noun default 
 method of an attribute will in turn call the 
\begin_inset Quotes eld
\end_inset 

readAttribute
\begin_inset Quotes erd
\end_inset 

 on the Tango device.
\layout Standard

The result of this is that the 
\family typewriter 
IAttributes
\family default 
 and the 
\family typewriter 
IDevices
\family default 
 fire off events to their registered listeners
\begin_inset LatexCommand \index{listener}

\end_inset 

 containing snapshots of their state.
 The events are fired either because the 
\noun on 
IAttribute
\noun default 
 respectively 
\noun on 
IDevice
\noun default 
 has received a Tango Change event (event driven objects), or because the
 
\noun on 
refresh()
\noun default 
 method of the object has issued a readAttribute on the Tango device.
\layout Subsection

The DeviceFactory
\layout Standard

The device factory is responsible for two things
\layout Enumerate

Creating new devices when needed 
\layout Enumerate

Refreshing the state and status of these devices 
\layout Standard

Regarding the first point, new devices are created when they are asked for
 and only if they have not already been created.
 If a programmer asks for the same device twice, she is returned a reference
 to the same device-object.
\layout Standard

The 
\family typewriter 
DeviceFactory
\family default 
 contains a Refresher as described above, which makes sure that the all
 
\family sans 
Devices
\family default 
 in the 
\family sans 
DeviceFactory
\family default 
 updates their state and status and fire events to its listeners.
\layout Subsection

The AttributeFactory and the CommandFactory
\layout Standard

These factories are responsible for taking a name of an attribute or command
 and returning an object representing the attribute or command.
 It is also responsible for making sure that the appropriate 
\family typewriter 
IDevice
\family default 
 is already available.
 Normally the programmer does not want to use these factory classes directly.
 They are used by TangoATK classes indirectly when the application programmer
 calls the AttributeList's (or CommandList's) 
\noun on 
add()
\noun default 
 method.
\layout Subsection

The AttributeList
\begin_inset LatexCommand \index{AttributeList}

\end_inset 

 and the CommandList
\begin_inset LatexCommand \index{CommandList}

\end_inset 


\layout Standard

These lists are containers for attributes and commands.
 They delegate the construction-work to the factories mentioned above, and
 generally do not do much more, apart from containing refreshers, and thus
 being able to make the objects they contain refresh their listeners.
\layout Subsection

The Attributes
\layout Standard

The attributes
\begin_inset LatexCommand \index{attributes}

\end_inset 

 come in several flavors.
 Tango supports the following types:
\layout Itemize

Short 
\layout Itemize

Long 
\layout Itemize

Double
\layout Itemize

String 
\layout Itemize

Unsigned Char
\layout Itemize

Boolean
\layout Itemize

Unsigned short
\layout Itemize

Float
\layout Standard

The last four types (unsigned char, boolean, unsigned short and float) have
 been added to Tango since Tango 5.
 These types will be supported by TangoATK in the near future.
 According to Tango specifications, all these types can be of the following
 formats:
\layout Itemize

Scalar, a single value 
\layout Itemize

Spectrum, a single array 
\layout Itemize

Image, a two dimensional array 
\layout Standard

For the sake of simplicity, TangoATK has combined all the numeric types
 into one, presenting all them all as doubles.
 So the TangoATK classes which handle the numeric attributes are : NumberScalar,
 NumberSpectrum and NumberImage (Number can be short, long, double, float,
 ...).
\layout Standard

Again, to simplify things, there is no attribute class representing string-image
s as they are not likely to appear.
\layout Subsubsection

The hierarchy
\layout Standard

As the observant reader will notice, a scalar is a spectrum with a length
 of one, which in fact is an image with a second dimension of length zero.
 From this observation the attribute hierarchy is expressed in the following
 interfaces:
\layout Description

INumberScalar which extends 
\layout Description

INumberSpectrum which extends 
\layout Description

INumberImage which extends 
\layout Description

IAttribute \SpecialChar ~

\layout Standard

The 
\family typewriter 
IStringScalar
\family default 
 is left a bit on its own since it doesn't cleanly follow the pattern mentioned
 above, so it extends 
\family typewriter 
IAttribute
\family default 
 more or less directly.
\layout Standard

Each of these types emit their proper events and have their proper listeners.
 Please consult the javadoc for further information.
\layout Subsection

The Commands
\layout Standard

The commands
\begin_inset LatexCommand \index{commands}

\end_inset 

 in Tango are rather ugly beasts.
 There exists the following kinds of commands
\layout Itemize

Those which take input 
\layout Itemize

Those which do not take input 
\layout Itemize

Those which do output 
\layout Itemize

Those which do not do output 
\layout Standard

Now, for both input and output we have the following types:
\layout Itemize

Double 
\layout Itemize

Float
\layout Itemize

Unsigned Long
\layout Itemize

Long 
\layout Itemize

Unsigned Short
\layout Itemize

Short 
\layout Itemize

String
\layout Standard

These types can appear in scalar or array formats.
 In addition to this, there are also four other types of parameters:
\layout Enumerate

Boolean
\layout Enumerate

Unsigned Char Array
\layout Enumerate

The StringLongArray 
\layout Enumerate

The StringDoubleArray 
\layout Standard

The last two types mentioned above are two-dimensional arrays containing
 a string array in the first dimension and a long or double array in the
 second dimension, respectively.
\layout Standard

As for the attributes, all numeric types have been converted into doubles,
 but there has been made little or no effort to create an hierarchy of types
 for the commands.
\layout Subsubsection

Events
\begin_inset LatexCommand \index{event}

\end_inset 

 and listeners
\begin_inset LatexCommand \index{listener}

\end_inset 


\layout Standard

The commands publish results to their 
\family typewriter 
IResultListener
\family default 
s, by the means of a 
\family typewriter 
ResultEvent
\family default 
.
 The 
\family typewriter 
IResultListener
\family default 
 extends 
\family typewriter 
IErrorListener
\family default 
, any viewer
\begin_inset LatexCommand \index{viewer}

\end_inset 

 of command-results should also know how to handle errors.
 So a viewer of command-results implements IResultListener interface and
 registers itself as a resultListener for the command it has to show the
 results.
\layout LyX-Code

 
\layout LyX-Code

\layout LyX-Code

\layout Standard
\align center 

\begin_inset Graphics
	filename /mntdirect/_segfs/tango/tmp/TangoPictures/ExpoTango/0046-reduc.jpg
	display color

\end_inset 


\the_end
